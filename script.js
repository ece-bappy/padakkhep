document.addEventListener('DOMContentLoaded', () => {
    // --- DOM Elements ---
    const chatWindow = document.getElementById('chat-window');
    const chatMessages = document.getElementById('chat-messages');
    // Notice form fields
    const noticeForm = document.getElementById('notice-form');
    const karanInput = document.getElementById('karan-input');
    const uddeshhoInput = document.getElementById('uddeshho-input');
    const koroniyoInput = document.getElementById('koroniyo-input');
    const tarikhInput = document.getElementById('tarikh-input');
    const sendBtn = document.getElementById('send-btn');
    const loadingIndicator = document.getElementById('loading');
    const settingsBtn = document.getElementById('settings-btn');
    const settingsModal = document.getElementById('settings-modal');
    const closeBtn = settingsModal.querySelector('.close-btn');
    const apiKeyInput = document.getElementById('api-key-input');
    const saveApiKeyBtn = document.getElementById('save-api-key-btn');
    const apiKeyStatus = document.getElementById('api-key-status');

    // --- Configuration ---
    const API_ENDPOINT = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent`; // Use the specific model requested
    const SYSTEM_PROMPT = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶ï‡ßç‡¶∑ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶≤‡ßá‡¶ñ‡¶ï‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶è‡¶®‡ßç‡¶° ‡¶ï‡¶≤‡ßá‡¶ú  ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶∏‡¶ø‡¶™‡¶æ‡¶≤‡ßá‡¶∞ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤ ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶∏‡¶ø‡¶™‡¶æ‡¶≤‡ßá‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡¶∞‡ßç‡¶§‡¶æ/‡¶ï‡¶∞‡ßç‡¶Æ‡¶ö‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶æ‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡¶ø‡¶ï ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡•§

‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶∏‡¶ø‡¶™‡¶æ‡¶≤ ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶¨‡ßá:
‡ßß. ‡¶ï‡¶æ‡¶∞‡¶£: [‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ü‡¶ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶¨‡¶æ ‡¶ò‡¶ü‡¶®‡¶æ]
‡ß®. ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø: [‡¶ï‡¶æ‡¶ï‡ßá ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ü‡¶ø ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá - ‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï, ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ, ‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï, ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ö‡¶æ‡¶∞‡ßÄ ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶ø‡¶≤‡¶ø‡¶§ ‡¶ó‡ßã‡¶∑‡ßç‡¶†‡ßÄ]
‡ß©. ‡¶ï‡¶∞‡¶£‡ßÄ‡ßü: [‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶∏‡¶Ç‡¶∂‡ßç‡¶≤‡¶ø‡¶∑‡ßç‡¶ü‡¶¶‡ßá‡¶∞ ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶¨‡¶æ ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶ï‡ßÄ ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá]
‡ß™. ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: [‡¶Ø‡ßá ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂]

‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶æ‡¶ô‡ßç‡¶ó ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®‡¶ø‡¶ï ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶π‡¶¨‡ßá‡•§ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡ßá‡¶∞ ‡¶ï‡¶æ‡¶†‡¶æ‡¶Æ‡ßã ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶∞‡ßÇ‡¶™ ‡¶π‡¶¨‡ßá:
‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ: "‡¶™‡¶¶‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤"
‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®: "‡¶®‡ßã‡¶ü‡¶ø‡¶∂"
‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: [‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ø‡ßá ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶¶‡ßá‡¶¨‡ßá, ‡¶∏‡ßá‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá]
‡¶¨‡¶ø‡¶∑‡ßü: [‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶¨‡¶ø‡¶∑‡ßü]
‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡¶Ç‡¶∂: ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßá (‡¶Ø‡ßá‡¶Æ‡¶®: "‡¶∏‡¶ï‡¶≤ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï/‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ø‡¶ï‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶ó‡¶§‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá...", "‡¶∏‡¶ï‡¶≤ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá...") ‡¶ï‡¶æ‡¶∞‡¶£‡¶ü‡¶ø ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶∞‡¶™‡¶∞ ‡¶ï‡¶∞‡¶£‡ßÄ‡ßü ‡¶¨‡¶ø‡¶∑‡ßü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶ì ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ú‡¶®‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü ‡¶§‡ßÅ‡¶≤‡ßá ‡¶ß‡¶∞‡¶¨‡ßá‡•§
‡¶∏‡¶Æ‡¶æ‡¶™‡ßç‡¶§‡¶ø:
"‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ï‡ßç‡¶∞‡¶Æ‡ßá,"
"‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶∏‡¶ø‡¶™‡¶æ‡¶≤,"
"‡¶™‡¶¶‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶è‡¶®‡ßç‡¶° ‡¶ï‡¶≤‡ßá‡¶ú‡ßá "

‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶æ‡¶¨‡¶≤‡ßÄ:
‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡¶ø‡¶ï, ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ú‡¶®‡¶ï ‡¶π‡¶¨‡ßá‡•§
‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§
‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡•§`;

    // --- API Key Management ---
    // WARNING: Storing the key like this initially is insecure for public deployment.
    // Consider setting initialApiKey = '' and requiring user input first.
    const initialApiKey = 'AIzaSyBaDUrY4bT2Sp257lUCxsvixnxfIhkxgBk'; // <-- HARDCODED KEY (Insecure!)
    let apiKey = localStorage.getItem('googleApiKey') || initialApiKey;

    function updateApiKeyStatus() {
        if (apiKey && apiKey !== initialApiKey) {
            apiKeyStatus.textContent = 'Custom API Key is saved.';
            apiKeyStatus.style.color = 'green';
        } else if (apiKey === initialApiKey && initialApiKey) {
             apiKeyStatus.textContent = 'Using default (insecure) API Key.';
             apiKeyStatus.style.color = 'orange';
        } else {
            apiKeyStatus.textContent = 'No API Key set. Please enter one.';
            apiKeyStatus.style.color = 'red';
        }
    }

    function saveApiKey() {
        const newApiKey = apiKeyInput.value.trim();
        if (newApiKey) {
            apiKey = newApiKey;
            localStorage.setItem('googleApiKey', apiKey);
            console.log("API Key saved to localStorage.");
            apiKeyStatus.textContent = 'API Key saved successfully!';
            apiKeyStatus.style.color = 'green';
            setTimeout(hideSettingsModal, 1000); // Close modal after showing success
        } else {
            apiKeyStatus.textContent = 'Please enter a valid API Key.';
            apiKeyStatus.style.color = 'red';
        }
    }

    function loadApiKeyIntoModal() {
        apiKeyInput.value = apiKey || ''; // Load current key into input
        updateApiKeyStatus(); // Update status message when modal opens
    }

    // --- Modal Handling ---
    function showSettingsModal() {
        loadApiKeyIntoModal();
        settingsModal.classList.remove('hidden');
    }

    function hideSettingsModal() {
        settingsModal.classList.add('hidden');
    }

    // --- Chat Functions ---
    function showLoading() {
        loadingIndicator.classList.remove('hidden');
    }

    function hideLoading() {
        loadingIndicator.classList.add('hidden');
    }

    function scrollToBottom() {
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    // Minimal Markdown to HTML converter for bold/italic and line breaks
    function markdownToHtml(text) {
        // Bold: **text** or __text__
        text = text.replace(/\*\*(.*?)\*\*/g, '<b>$1</b>');
        text = text.replace(/__(.*?)__/g, '<b>$1</b>');
        // Italic: *text* or _text_ (avoid bold conflict)
        text = text.replace(/\*(?!\*)(.*?)\*(?!\*)/g, '<i>$1</i>');
        text = text.replace(/_(?!_)(.*?)_(?!_)/g, '<i>$1</i>');
        // Line breaks
        text = text.replace(/\n/g, '<br>');
        return text;
    }

    function displayMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message-bubble', `${sender}-message`);

        // Use innerHTML carefully to allow emojis and potential basic formatting from AI
        // Consider sanitizing if the AI could produce harmful HTML
        const paragraph = document.createElement('p');
        paragraph.innerHTML = markdownToHtml(text);
        messageDiv.appendChild(paragraph);

        chatMessages.appendChild(messageDiv);
        scrollToBottom(); // Scroll after adding the message
    }

    async function fetchBotResponse(userMessage) {
        if (!apiKey) {
            displayMessage("Seriously? You haven't even given me an API key in the settings. üôÑ How do you expect me to function? Fix it!", 'bot');
            hideLoading();
            return;
        }

        showLoading();

        const requestBody = {
            // Using systemInstruction (supported by newer Gemini models like 1.5 Flash)
            "systemInstruction": {
                "parts": [{"text": SYSTEM_PROMPT}]
            },
            "contents": [{
                "role": "user", // Gemini API uses 'role' for conversation history
                "parts": [{"text": userMessage}]
            }],
            // Optional: Add generationConfig if needed
            // "generationConfig": {
            //   "temperature": 0.7,
            //   "maxOutputTokens": 1000
            // }
        };

        try {
            const response = await fetch(`${API_ENDPOINT}?key=${apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error("API Error Response:", errorData);
                let errorMsg = `API Error: ${response.status} ${response.statusText}.`;
                if (errorData.error?.message) {
                    errorMsg += ` Details: ${errorData.error.message}`;
                }
                 // Check for common API key errors
                if (response.status === 400 && errorData.error?.message.includes('API key not valid')) {
                    errorMsg = "Ugh, that API Key isn't working. üòí Did you copy it correctly? Check the settings (‚öôÔ∏è).";
                } else if (response.status === 403) {
                     errorMsg = "Looks like this API Key doesn't have permission for this model or project. Maybe check your Google Cloud/AI Studio settings? Or maybe I just don't *want* to talk. ü§î";
                } else if (response.status === 404) {
                     errorMsg = "Either that model name is bogus or the API endpoint is wrong. Check the `script.js` maybe? Or maybe it just vanished. Poof. ‚ú®";
                }

                displayMessage(errorMsg, 'bot');
                hideLoading();
                return; // Stop processing on error
            }

            const data = await response.json();

            // --- Extract text based on typical Gemini response structure ---
            let botText = "Hmph. I guess I have nothing witty to say about *that*. Or maybe I do and I'm just not telling you. ü§∑‚Äç‚ôÄÔ∏è"; // Default fallback

            if (data.candidates && data.candidates.length > 0 &&
                data.candidates[0].content && data.candidates[0].content.parts &&
                data.candidates[0].content.parts.length > 0) {
                botText = data.candidates[0].content.parts[0].text;
            } else if (data.error) {
                 console.error("API returned an error object:", data.error);
                 botText = `Well, this is awkward. The API spat back an error: ${data.error.message}. How *incompetent*.`;
            }
             else {
                console.warn("Unexpected API response structure:", data);
                botText = "My 'brain' returned something weird. I can't even parse this nonsense. Try again, maybe? Or don't. I don't care. üòí";
            }

            displayMessage(botText, 'bot');

        } catch (error) {
            console.error('Network or Fetch Error:', error);
            displayMessage(`Oh great, something broke. Probably the internet, or maybe just my will to live. Error: ${error.message}. Try again later... or preferably never. üôÑ`, 'bot');
        } finally {
            hideLoading();
            scrollToBottom(); // Ensure scroll after loading hides
        }
    }


    function handleNoticeSubmit(e) {
        e.preventDefault();
        const karan = karanInput.value.trim();
        const uddeshho = uddeshhoInput.value.trim();
        const koroniyo = koroniyoInput.value.trim();
        const tarikh = tarikhInput.value.trim();
        if (karan && uddeshho && koroniyo && tarikh) {
            // Compose a single message for the system prompt
            const userMessage = `‡¶ï‡¶æ‡¶∞‡¶£: ${karan}\n‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø: ${uddeshho}\n‡¶ï‡¶∞‡¶£‡ßÄ‡ßü: ${koroniyo}\n‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${tarikh}`;
            displayMessage(userMessage, 'user');
            fetchBotResponse(userMessage);
            // Optionally clear fields after send
            // karanInput.value = '';
            // uddeshhoInput.value = '';
            // koroniyoInput.value = '';
            // tarikhInput.value = '';
        }
    }

    // --- Event Listeners ---

    noticeForm.addEventListener('submit', handleNoticeSubmit);

    settingsBtn.addEventListener('click', showSettingsModal);
    closeBtn.addEventListener('click', hideSettingsModal);
    saveApiKeyBtn.addEventListener('click', saveApiKey);

    // Close modal if clicking outside the content area
    settingsModal.addEventListener('click', (e) => {
        if (e.target === settingsModal) {
            hideSettingsModal();
        }
    });

    // --- Initial Setup ---
     updateApiKeyStatus(); // Show initial key status in modal (even if hidden)
     console.log("Useless AI Initialized. Current API Key:", apiKey ? 'Set' : 'Not Set');
     if (!apiKey) {
        // Optional: Show a message if no key is set on load
        // displayMessage("Psst! Click the ‚öôÔ∏è icon to enter your Google AI Studio API key before we begin this charade.", 'bot');
        // Or even open the modal automatically:
        // showSettingsModal();
     }
      scrollToBottom(); // Scroll down initially if there are messages

}); // End DOMContentLoaded
